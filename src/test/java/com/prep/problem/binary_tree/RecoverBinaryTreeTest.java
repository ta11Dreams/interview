package com.prep.problem.binary_tree;

import org.junit.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.assertEquals;

public class RecoverBinaryTreeTest {

    TreeDeserializer treeMaker = new TreeDeserializer();

    RecoverBinaryTree recover = new RecoverBinaryTree();


    @Test
    public void recoverTree() {
        String treeString = "309 131 506 55 180 313 592 31 88 138 305 310 380 509 618 25 46 71 106 135 153 210 306 -1 312 362 427 507 553 609 662 24 27 32 51 67 81 105 116 133 136 152 176 191 281 -1 307 311 -1 320 367 425 505 -1 508 542 563 599 614 646 663 22 -1 26 28 -1 41 47 52 64 70 74 82 102 -1 107 125 132 134 -1 137 147 -1 167 177 188 196 248 285 -1 308 -1 -1 318 346 366 376 401 426 456 -1 -1 -1 516 546 560 591 596 608 612 616 641 651 -1 665 21 23 -1 -1 -1 29 39 42 -1 49 -1 53 56 66 68 -1 73 78 -1 87 101 103 -1 114 123 130 -1 -1 -1 -1 -1 -1 141 150 166 171 -1 179 181 189 193 208 232 279 283 289 -1 -1 317 319 341 350 363 -1 370 377 395 413 -1 -1 435 485 514 539 543 548 554 562 579 -1 594 598 602 -1 610 613 615 617 624 643 650 652 664 666 -1 -1 -1 -1 -1 30 35 40 -1 44 48 50 -1 54 -1 58 65 -1 -1 69 72 -1 75 79 86 -1 90 -1 -1 104 108 115 117 124 127 -1 139 145 148 151 157 -1 170 175 178 -1 -1 186 -1 190 192 195 198 209 229 243 253 280 282 284 286 299 314 -1 -1 -1 324 344 347 353 -1 364 369 373 -1 378 389 397 405 415 434 448 464 497 511 515 526 540 -1 544 547 549 -1 557 561 -1 576 582 593 595 597 -1 601 603 -1 611 -1 -1 -1 -1 -1 -1 619 626 642 645 649 -1 -1 657 -1 -1 -1 667 -1 -1 33 36 -1 -1 43 45 -1 -1 -1 -1 -1 -1 57 59 -1 -1 -1 -1 -1 -1 -1 76 -1 80 84 -1 89 94 -1 -1 -1 111 -1 -1 -1 121 -1 -1 126 129 -1 140 143 146 -1 149 -1 -1 154 161 168 -1 174 -1 -1 -1 183 187 -1 -1 -1 -1 194 -1 197 200 -1 -1 215 231 238 245 249 278 -1 -1 -1 -1 -1 -1 -1 288 293 304 -1 315 321 331 342 345 -1 349 352 357 -1 365 368 -1 371 375 -1 379 385 390 396 398 402 410 414 421 432 -1 445 449 458 480 489 499 510 512 -1 -1 517 538 -1 541 -1 545 -1 -1 -1 550 555 558 -1 -1 567 577 580 587 -1 -1 -1 -1 -1 -1 600 -1 -1 604 -1 -1 -1 622 625 640 -1 -1 644 -1 647 -1 655 659 -1 -1 -1 34 -1 37 -1 -1 -1 -1 -1 -1 -1 60 -1 77 -1 -1 83 85 -1 -1 93 95 110 112 119 122 -1 -1 128 -1 -1 -1 142 144 -1 -1 -1 -1 -1 156 160 162 -1 169 173 -1 182 184 -1 -1 -1 -1 -1 -1 199 205 211 217 230 -1 234 242 244 247 -1 251 273 -1 287 -1 290 296 303 -1 -1 316 -1 322 328 332 -1 343 -1 -1 348 -1 351 -1 354 358 -1 -1 -1 -1 -1 372 374 -1 -1 -1 384 387 -1 393 -1 -1 -1 400 -1 404 406 411 -1 -1 420 424 429 433 442 447 -1 452 457 460 470 482 488 496 498 503 -1 -1 -1 513 -1 522 537 -1 -1 -1 -1 -1 -1 552 -1 556 -1 559 565 575 -1 578 -1 581 584 588 -1 -1 -1 605 620 623 -1 -1 638 -1 -1 -1 -1 648 654 656 658 661 -1 -1 -1 38 -1 61 -1 -1 -1 -1 -1 -1 91 -1 -1 96 109 -1 -1 113 118 120 -1 -1 -1 -1 -1 -1 -1 -1 155 -1 158 -1 -1 165 -1 -1 172 -1 -1 -1 -1 185 -1 -1 202 206 -1 213 216 222 -1 -1 233 236 239 -1 -1 -1 246 -1 250 252 260 275 -1 -1 -1 291 295 298 302 -1 -1 -1 -1 323 325 329 -1 338 -1 -1 -1 -1 -1 -1 -1 356 -1 359 -1 -1 -1 -1 382 -1 386 388 391 394 399 -1 403 -1 -1 408 -1 412 419 -1 422 -1 428 430 -1 -1 438 443 446 -1 450 454 -1 -1 459 463 469 475 481 484 487 490 492 -1 -1 -1 501 504 -1 -1 519 524 527 -1 551 -1 -1 -1 -1 -1 564 566 569 -1 -1 -1 -1 -1 583 586 -1 589 -1 607 -1 621 -1 -1 635 639 -1 -1 653 -1 -1 -1 -1 -1 660 -1 -1 -1 -1 62 -1 92 -1 100 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 159 163 -1 -1 -1 -1 -1 201 203 -1 207 212 214 -1 -1 221 223 -1 -1 235 237 -1 241 -1 -1 -1 -1 -1 -1 256 266 274 276 -1 292 294 -1 297 -1 301 -1 -1 -1 -1 327 -1 330 337 340 355 -1 -1 360 381 383 -1 -1 -1 -1 -1 392 -1 -1 -1 -1 -1 -1 407 409 -1 -1 416 -1 -1 423 -1 -1 -1 431 437 440 -1 444 -1 -1 -1 451 453 455 -1 -1 462 -1 466 -1 473 479 -1 -1 483 -1 486 -1 -1 -1 491 494 500 502 -1 -1 518 520 523 525 -1 536 -1 -1 -1 -1 -1 -1 568 570 -1 -1 585 -1 -1 590 606 -1 -1 -1 630 637 -1 -1 -1 -1 -1 -1 -1 63 -1 -1 97 -1 -1 -1 -1 164 -1 -1 -1 204 -1 -1 -1 -1 -1 -1 220 -1 -1 225 -1 -1 -1 -1 240 -1 255 258 265 271 -1 -1 -1 277 -1 -1 -1 -1 -1 -1 300 -1 326 -1 -1 -1 334 -1 339 -1 -1 -1 -1 361 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 417 -1 -1 -1 -1 436 -1 439 441 -1 -1 -1 -1 -1 -1 -1 -1 461 -1 465 467 471 474 476 -1 -1 -1 -1 -1 -1 -1 493 495 -1 -1 -1 -1 -1 -1 -1 521 -1 -1 -1 -1 529 -1 -1 -1 -1 574 -1 -1 -1 -1 -1 -1 627 634 636 -1 -1 -1 -1 98 -1 -1 -1 -1 218 -1 224 228 -1 -1 254 -1 257 259 263 -1 270 272 -1 -1 -1 -1 -1 -1 333 335 -1 -1 -1 -1 -1 418 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 468 -1 472 -1 -1 -1 478 -1 -1 -1 -1 -1 -1 528 535 571 -1 -1 628 632 -1 -1 -1 -1 99 -1 219 -1 -1 226 -1 -1 -1 -1 -1 -1 -1 261 264 268 -1 -1 -1 -1 -1 -1 336 -1 -1 -1 -1 -1 -1 477 -1 -1 -1 532 -1 -1 572 -1 629 631 633 -1 -1 -1 -1 -1 227 -1 262 -1 -1 267 269 -1 -1 -1 -1 530 533 -1 573 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 531 -1 534 -1 -1 -1 -1 -1 -1";

        TreeNode tree = treeMaker.levelOrderDeserialisation(treeString);

        ArrayList<Integer> result = recover.recoverTree(tree);

        assertEquals(List.of(489, 490), result);

    }

    @Test
    public void recoverTreeTest2() {
        String treeString2 = "5 3 6 1 4 -1 -1 -1 -1 2 -1 -1 -1";
        TreeNode tree = treeMaker.levelOrderDeserialisation(treeString2);
        ArrayList<Integer> result = recover.recoverTree(tree);

        assertEquals(List.of(2, 3), result);
    }

    @Test
    public void recoverTreeTest3() {
        String treeString2 = "5 7 2 1 4 6 -1 -1 -1 3 -1 -1 -1 -1 -1";
        TreeNode tree = treeMaker.levelOrderDeserialisation(treeString2);
        ArrayList<Integer> result = recover.recoverTree(tree);

        assertEquals(List.of(2, 7), result);
    }
}